{"version":3,"sources":["Component/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["inputButtons","Calculator","props","state","result","previous","next","operator","answer","line","history","historylen","data","this","length","isNaN","setState","console","log","clear","seperate","oldline","data2","readHistory","len","undefined","tempOperator","parseInt","push","split","style","justifyContent","alignItems","display","height","padding","boxSizing","width","maxWidth","backgroundColor","borderRadius","boxShadow","maxHeight","overflow","minHeight","flexDirection","map","item","index","fontSize","color","margin","marginRight","items","border","lineHeight","onClick","calculate","value","Component","App","className","background","Boolean","window","location","hostname","match","initialState","userdata","userlogin","store","createStore","action","type","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37659da4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst inputButtons = [\n    ['C', '+/-', '%', '/'],\n    [7, 8, 9, '*'],\n    [4, 5, 6, '-'],\n    [1, 2, 3, '+'],\n    [0, '.', '=']\n];\nclass Calculator extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            result: 0,\n            previous: 0,\n            next: '',\n            operator: '',\n            answer: 0,\n            line: [],\n            history: [0],\n            historylen: 0\n        }\n    }\n    calculate(data) {\n        const { previous, next, result, history, historylen } = this.state;\n        let length = historylen + 1\n        let isOperator = isNaN(data)\n        if (isOperator) {\n            this.setState({\n                historylen: length,\n                previous: next,\n                next: 0\n            }, () => console.log('historylen', historylen))\n            if (data == '=') {\n                this.result()\n            }\n\n            else if (data === 'C') {\n                this.clear()\n            }\n            else {\n                this.seperate(data);\n            }\n\n        }\n\n        else {\n            let oldline = next == 0 ? data : next + '' + data\n            let data2 = history;\n            oldline = this.readHistory(data2, historylen) ? data2[historylen] + '' + oldline : oldline;\n            data2[historylen] = oldline\n            this.setState({ next: oldline, history: data2 })\n        }\n    }\n\n\n    readHistory(data, len) {\n        if (data[len] !== undefined) {\n            return isNaN(data[len])\n        }\n        else {\n            return false;\n        }\n\n    }\n\n    result() {\n        const { previous, next, history, operator } = this.state\n        let data = history;\n        let tempOperator = ''\n        console.log('history', history)\n        if (operator === '+') {\n            tempOperator = parseInt(previous) + parseInt(next)\n            data.push(tempOperator)\n        }\n        else if (operator === '-') {\n            tempOperator = parseInt(previous) + parseInt(next)\n            data.push(tempOperator)\n        }\n        else if (operator === '*') {\n            console.log('next', next.length)\n            if (next) {\n                next.split('')\n            }\n            tempOperator = parseInt(previous) * next[1]\n            data.push(tempOperator)\n        }\n        else if (operator === '/') {\n            next.split('')\n            tempOperator = parseInt(previous) / next[1]\n            data.push(tempOperator)\n        }\n\n\n        this.setState({ history: data, previous: tempOperator })\n    }\n    clear() {\n        this.setState({\n            previous: 0,\n            next: 0,\n            historylen: 0,\n            operator: '',\n            result: 0, history: [0]\n        })\n    }\n    seperate(data) {\n        const { previous, history, next, operator } = this.state;\n        // console.log('seperate',previous,history)\n        if (operator === '+') {\n            this.setState({ previous: parseInt(previous) + parseInt(next) })\n        }\n        else if (operator === '-') {\n            this.setState({ previous: parseInt(previous) + parseInt(next) })\n        }\n        else if (operator === '*') {\n            this.setState({ previous: parseInt(previous) + parseInt(next) })\n        }\n        else if (operator === '/') {\n            this.setState({ previous: parseInt(previous) + parseInt(next) })\n        }\n        let data2 = history\n        data2.push(data)\n\n        this.setState({ history: data2, operator: data })\n    }\n    render() {\n        const { history, result } = this.state\n        return (\n            <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', height: '100vh', padding: '20px', boxSizing: 'border-box' }}>\n                <div style={{ padding: 5, width: '100%', maxWidth: 250, backgroundColor: 'rgba(255,255,255,0.8)', borderRadius: 8, boxShadow: '5px 8px 20px rgb(181,160,246)' }}>\n                    <div style={{\n                        display: 'flex', maxHeight: 150, overflow: 'auto', minHeight: 100,\n                        flexDirection: 'column', alignItems: 'flex-end'\n                    }}>\n                        {history.map((item, index) => {\n                            return (\n                                <div>\n                                    <p style={{ fontSize: 20, color: '#00ccff', margin: 0, padding: 0, marginRight: 5 }}>{item}</p>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div>\n                        {inputButtons.map((items, index) => {\n                            return (\n                                <div style={{ display: 'flex', flexDirection: 'row', padding: 10, justifyContent: 'space-between', alignItems: 'center' }}>\n\n                                    {items.map((item, index) => {\n                                        if (item === '=') {\n                                            return (<button\n                                                style={{\n                                                    height: 40, width: '40%', border: 'none',\n                                                    backgroundColor: '#00ccff',\n                                                    boxShadow: '3px 4px 5px rgb(149, 222, 241)',\n                                                    borderRadius: '20px',\n                                                    lineHeight: '40px'\n                                                }}\n                                                onClick={() => this.calculate(item)}\n                                                value={item}>\n                                                <p\n                                                    style={{\n                                                        fontSize: 18, margin: 0, padding: 0,\n                                                        color: '#fff',\n                                                    }}>\n                                                    {item}</p>\n                                            </button>)\n                                        }\n                                        else {\n                                            return (\n                                                <button\n                                                    style={{\n                                                        height: 40, width: 40, border: 'none',\n                                                        backgroundColor: index === 3 ? '#00ccff' : '#fff',\n                                                        boxShadow: index === 3 ? '3px 4px 5px rgb(149, 222, 241)' : '3px 4px 5px #ddd',\n                                                        borderRadius: '50%',\n                                                        lineHeight: '40px'\n                                                    }}\n                                                    onClick={() => this.calculate(item)}\n                                                    value={item}>\n                                                    <p\n                                                        style={{\n                                                            fontSize: 18, margin: 0, padding: 0,\n                                                            color: index === 3 ? '#fff' : '#00ccff',\n                                                        }}>\n                                                        {item}</p>\n                                                </button>\n\n                                            )\n                                        }\n                                    })}\n                                </div>\n                            )\n                        })\n\n                        }\n                    </div>\n\n\n\n\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from  './Component/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{background : 'linear-gradient(to top,rgb(181,160,246),rgb(129,220,255))',height : '100vh'}}>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nconst initialState = {\n    userdata: '',\n    userlogin: '',\n\n};\n\nfunction reducer(state = initialState, action) {\n    console.log('reducer', action);\n    switch (action.type) {\n        case 'USERLOGIN':\n            return {\n                userlogin: action.userlogin,\n                userdata: state.userdata\n            }\n        case 'USERDATA':\n            return {\n                userdata: action.userdata,\n                userlogin: state.userlogin,\n\n            }\n    }\n}\nconst store = createStore(reducer);\nconst App2 = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<App2 />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}